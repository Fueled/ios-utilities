// Copyright Â© 2020, Fueled Digital Media, LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#if canImport(Combine)
import Combine

@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol ActionProtocol {
	///
	/// The type of the values used as inputs to the action.
	///
	associatedtype Input
	///
	///
	/// The type of the values output from the action.
	///
	associatedtype Output
	/// The type of errors emitted by the action.
	///
	associatedtype Failure: Swift.Error
	///
	/// The type of errors emitted when applying the action.
	///
	associatedtype ApplyFailure

	associatedtype IsExecutingPublisher: Publisher where IsExecutingPublisher.Output == Bool, IsExecutingPublisher.Failure == Never
	associatedtype IsEnabledPublisher: Publisher where IsEnabledPublisher.Output == Bool, IsEnabledPublisher.Failure == Never

	associatedtype ValuesPublisher: Publisher where ValuesPublisher.Output == Output, ValuesPublisher.Failure == Never
	associatedtype ErrorsPublisher: Publisher where ErrorsPublisher.Output == Failure, ErrorsPublisher.Failure == Never

	associatedtype ApplyPublisher: Publisher where ApplyPublisher.Output == Output, ApplyPublisher.Failure == ApplyFailure

	///
	/// Whether the action is currently executing.
	///
	var isExecuting: Bool { get }
	///
	/// Whether the action is currently enabled.
	///
	var isEnabled: Bool { get }
	///
	/// Whether the action is currently executing.
	///
	var isExecutingPublisher: IsExecutingPublisher { get }
	///
	/// Whether the action is currently enabled.
	///
	var isEnabledPublisher: IsEnabledPublisher { get }

	var values: ValuesPublisher { get }
	var errors: ErrorsPublisher { get }

	///
	/// Create a `SignalProducer` that would attempt to create and start a unit of work of
	/// the `Action`. The `SignalProducer` would forward only events generated by the unit
	/// of work it created.
	///
	/// - Parameters:
	///   - input: A value to be used to create the unit of work.
	///
	/// - Returns: A producer that forwards events generated by its started unit of work,
	///   or returns an appropriate `ApplyError` indicating the specific error
	///   that happened.
	///
	func apply(_ input: Input) -> ApplyPublisher
}

@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Action: ActionProtocol {
	public typealias ApplyFailure = ActionError<Failure>

	public var isExecutingPublisher: AnyPublisher<Bool, Never> {
		self.$isExecuting.eraseToAnyPublisher()
	}

	public var isEnabledPublisher: AnyPublisher<Bool, Never> {
		self.$isEnabled.eraseToAnyPublisher()
	}
}

@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension ActionProtocol where Input == Void {
	///
	/// Create a `SignalProducer` that would attempt to create and start a unit of work of
	/// the `Action`. The `SignalProducer` would forward only events generated by the unit
	/// of work it created.
	///
	/// - Returns: A producer that forwards events generated by its started unit of work,
	///   or returns an appropriate `ApplyError` indicating the specific error
	///   that happened.
	///
	public func apply() -> ApplyPublisher {
		return self.apply(())
	}
}

#endif
