//
//  ActionProtocol.swift
//  FueledUtils
//
//  Created by Stéphane Copin on 1/23/19.
//  Copyright © 2019 Fueled. All rights reserved.
//

import Foundation
import ReactiveSwift
import Result

public protocol ActionErrorProtocol: Swift.Error {
	associatedtype SubError: Swift.Error

	var error: SubError? { get }
}

extension ActionError: ActionErrorProtocol {
	public var error: Error? {
		if case .producerFailed(let error) = self {
			return error
		}
		return nil
	}
}

public protocol ActionProtocol {
	associatedtype OutputType
	associatedtype InputType
	associatedtype ErrorType: Swift.Error
	associatedtype ApplyErrorType: Swift.Error

	///
	/// Whether the action is currently executing.
	///
	var isExecuting: Property<Bool> { get }
	///
	/// Whether the action is currently enabled.
	///
	var isEnabled: Property<Bool> { get }
	///
	/// A signal of all events generated from all units of work of the `Action`.
	///
	/// In other words, this sends every `Event` from every unit of work that the `Action`
	/// executes.
	///
	var events: Signal<Signal<OutputType, ErrorType>.Event, NoError> { get }
	///
	/// A signal of all values generated from all units of work of the `Action`.
	///
	/// In other words, this sends every value from every unit of work that the `Action`
	/// executes.
	///
	var values: Signal<OutputType, NoError> { get }
	///
	/// A signal of all errors generated from all units of work of the `Action`.
	///
	/// In other words, this sends every error from every unit of work that the `Action`
	/// executes.
	///
	var errors: Signal<ErrorType, NoError> { get }
	///
	/// The lifetime of the `Action`.
	///
	var lifetime: Lifetime { get }

	///
	/// Create a `SignalProducer` that would attempt to create and start a unit of work of
	/// the `Action`. The `SignalProducer` would forward only events generated by the unit
	/// of work it created.
	///
	/// If the execution attempt is for any reason failed, the producer fail with an
	/// error whose `error` property is `nil`.
	///
	/// - Parameters:
	///   - input: A value to be used to create the unit of work.
	///
	/// - Returns: A producer that forwards events generated by its started unit of work,
	///            or emits `ActionError.disabled` if the execution attempt is failed.
	///
	func apply(_ input: InputType) -> SignalProducer<OutputType, ApplyErrorType>
}

extension Action: ActionProtocol {
	public typealias OutputType = Output
	public typealias InputType = Input
	public typealias ErrorType = Error
	public typealias ApplyErrorType = ActionError<Error>
}

extension ActionProtocol where InputType == Void {
	public func apply() -> SignalProducer<OutputType, ApplyErrorType> {
		return self.apply(())
	}
}
